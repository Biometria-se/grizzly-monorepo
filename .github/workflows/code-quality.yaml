name: code quality

on:
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      changes_uv: ${{ steps.mapper.outputs.changes_uv }}
      changes_npm: ${{ steps.mapper.outputs.changes_npm }}

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.14"
          python-version: "3.13"
          enable-cache: true

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: "${{ vars.DEFAULT_BRANCH || 'main' }}"
          filters: .github/change-filters.yaml

      - name: map changed directories to packages
        id: mapper
        run: |
          uv run ./extras/scripts/map-changes.py --changes '${{ steps.filter.outputs.changes }}' --force ${{ github.event_name == 'workflow_dispatch' }}

  uv_lint:
    name: "lint / ${{ matrix.changes.package }} / ${{ matrix.image }} / py${{ matrix.python-version }}"
    needs: changes
    outputs:
      changes_uv: ${{ needs.changes.outputs.changes_uv }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [ubuntu-latest]
        python-version: ["3.10", "3.13"]
        changes: ${{ fromJSON(needs.changes.outputs.changes_uv) }}

    steps:
      - uses: MathRobin/timezone-action@v1.1
        with:
          timezoneLinux: 'Europe/Stockholm'
          timezoneWindows: 'W. Europe Standard Time'
          timezoneMacos: 'Europe/Stockholm'

      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.14"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: "install ${{ matrix.changes.package }} dev dependencies"
        run: |
          uv sync --locked -p ${{ matrix.python-version }} --inexact --only-dev --all-packages --no-install-project --no-install-workspace
          uv sync --locked -p ${{ matrix.python-version }} --inexact --package ${{ matrix.changes.package }}

      - name: "run lint"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          uv run ruff check .

      - name: "run format"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          uv run ruff format .

      - name: "check types"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          uv run mypy .

  uv_test:
    name: "test / ${{ matrix.changes.package }} / ${{ matrix.image }} / py${{ matrix.python-version }}"
    needs: uv_lint
    continue-on-error: true
    outputs:
      changes_uv: ${{ needs.uv_lint.outputs.changes_uv }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [ubuntu-latest]
        python-version: ["3.10", "3.13"]
        changes: ${{ fromJSON(needs.uv_lint.outputs.changes_uv) }}

    steps:
      - uses: MathRobin/timezone-action@v1.1
        with:
          timezoneLinux: 'Europe/Stockholm'
          timezoneWindows: 'W. Europe Standard Time'
          timezoneMacos: 'Europe/Stockholm'

      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.14"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: "install ${{ matrix.changes.package }} dev dependencies"
        run: |
          uv sync --locked -p ${{ matrix.python-version }} --inexact --only-dev --all-packages --no-install-project --no-install-workspace
          uv sync --locked -p ${{ matrix.python-version }} --inexact --package ${{ matrix.changes.package }}

      - name: "run unit tests"
        if: matrix.changes.tests.unit != ''
        working-directory: ${{ matrix.changes.directory }}
        run: |
          uv run pytest ${{ matrix.changes.tests.unit }}

      - name: "check coverage"
        if: matrix.changes.tests.unit != ''
        working-directory: ${{ matrix.changes.directory }}
        run: |
          uv run coverage report -i --omit=tests/**/*,**/*messagequeue*,**/mq/__init__.py,**/__version__.py --fail-under=80

  uv_test_e2e:
    name: "test-e2e / ${{ matrix.changes.package }} / ${{ matrix.image }} / py${{ matrix.python-version }}"
    needs: uv_test
    outputs:
      changes_uv: ${{ needs.uv_test.outputs.changes_uv }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [ubuntu-latest]
        python-version: ["3.13"]
        changes: ${{ fromJSON(needs.uv_test.outputs.changes_uv) }}

    steps:
      - uses: MathRobin/timezone-action@v1.1
        with:
          timezoneLinux: 'Europe/Stockholm'
          timezoneWindows: 'W. Europe Standard Time'
          timezoneMacos: 'Europe/Stockholm'

      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.14"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - uses: KengoTODA/actions-setup-docker-compose@main
        if: matrix.changes.tests.e2e.dist != ''
        with:
          version: '2.39.3'

      - name: "install ${{ matrix.changes.package }} dev dependencies"
        run: |
          uv sync --locked -p ${{ matrix.python-version }} --inexact --only-dev --all-packages --no-install-project --no-install-workspace
          uv sync --locked -p ${{ matrix.python-version }} --inexact --package ${{ matrix.changes.package }} --dev

      - name: setup environment
        run: |
          ssh-agent -a /tmp/ssh_auth_sock
          uv run ./extras/scripts/setup-e2e-environment.py

      - name: "run e2e test"
        id: e2e_local
        if: matrix.changes.tests.e2e.local != ''
        working-directory: ${{ matrix.changes.directory }}
        env:
          E2E_RUN_MODE: local
          SSH_AUTH_SOCK: /tmp/ssh_auth_sock
        run: |
          uv run pytest ${{ matrix.changes.tests.e2e.local }}

      - name: "e2e test log"
        if: matrix.changes.tests.e2e.local != '' && steps.e2e_local.outcome == 'failure'
        continue-on-error: true
        run: |
          cat /tmp/grizzly.log

      - name: "run e2e distributed test"
        id: e2e_dist
        if: matrix.changes.tests.e2e.dist != ''
        working-directory: ${{ matrix.changes.directory }}
        env:
          E2E_RUN_MODE: dist
          SSH_AUTH_SOCK: /tmp/ssh_auth_sock
        run: |
          uv run pytest ${{ matrix.changes.e2e.dist }}

      - name: "e2e test log"
        if: matrix.changes.tests.e2e.dist != '' && steps.e2e_dist.outcome == 'failure'
        continue-on-error: true
        run: |
          cat /tmp/grizzly.log

  npm-lint:
    name: "lint / ${{ matrix.changes.package }} / node"
    needs: changes
    runs-on: ${{ matrix.image }}
    outputs:
      changes_npm: ${{ needs.changes.outputs.changes_npm }}
    strategy:
      fail-fast: false
      matrix:
        image: [ubuntu-latest]
        changes: ${{ fromJSON(needs.changes.outputs.changes_npm) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v5
        with:
          cache: 'npm'
          node-version: 24
          cache-dependency-path: "${{ matrix.changes.directory }}/package-lock.json"

      - name: "install ${{ matrix.changes.package }} dev dependencies"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          npm install

      - name: "lint"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          npm run lint

      - name: "vsce build ${{ matrix.changes.package }}"
        working-directory: ${{ matrix.changes.directory }}
        run: |
          npx @vscode/vsce package

  npm-test:
    name: "test / ${{ matrix.changes.package }} / node"
    needs: npm-lint
    outputs:
      changes_npm: ${{ needs.npm-lint.outputs.changes_npm }}
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        image: [ubuntu-latest]
        python-version: ["3.10"]
        changes: ${{ fromJSON(needs.npm-lint.outputs.changes_npm) }}

    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.14"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - uses: actions/setup-node@v5
        with:
          cache: 'npm'
          node-version: 24
          cache-dependency-path: "${{ matrix.changes.directory }}/package-lock.json"

      - name: "install grizzly-ls"
        run: |
            uv sync --locked --inexact --package grizzly-loadtester-ls --no-dev
            uv sync --locked --inexact --package grizzly-loadtester --no-dev
            echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
            echo "PATH=$PWD/.venv/bin:$PATH" >> $GITHUB_ENV

      - name: "install ${{ matrix.changes.package }} dev dependencies"
        working-directory: ${{ matrix.changes.directory }}
        env:
          VIRTUAL_ENV: ${{ env.VIRTUAL_ENV }}
        run: |
          npm install
          python -m pip install uv

      - name: "tests"
        uses: mgor/setup-xvfb@v1
        env:
          VERBOSE: true
          VIRTUAL_ENV: ${{ env.VIRTUAL_ENV }}
        if: vars.DEFAULT_BRANCH || 'main' != 'HEAD'
        with:
          run: |
            npm run tests
          working-directory: ${{ matrix.changes.directory }}

      - name: server logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: grizzly-ls-server-logs
          path: "./editor-support/tests/project/grizzly-ls.log"
          if-no-files-found: error
